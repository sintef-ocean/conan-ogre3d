From c9276d2655b3e122604f16ce661f793f5e99ec2e Mon Sep 17 00:00:00 2001
From: Joakim Haugen <joakim.haugen@sintef.no>
Date: Thu, 13 Feb 2025 17:53:35 +0100
Subject: [PATCH] Do conanization fixes

---
 CMake/Dependencies.cmake              | 59 ++++++++++++++-------------
 CMake/Utils/MacroLogFeature.cmake     |  2 +-
 CMakeLists.txt                        | 13 +++++-
 Components/Bullet/CMakeLists.txt      |  1 -
 Components/Overlay/CMakeLists.txt     | 12 ++++--
 PlugIns/Assimp/CMakeLists.txt         |  2 +-
 PlugIns/FreeImageCodec/CMakeLists.txt |  6 +--
 PlugIns/GLSLang/CMakeLists.txt        | 33 +++++----------
 RenderSystems/Vulkan/CMakeLists.txt   |  5 +--
 Tests/CMakeLists.txt                  |  2 +-
 Tools/AssimpConverter/CMakeLists.txt  |  5 +--
 11 files changed, 67 insertions(+), 73 deletions(-)

diff --git a/CMake/Dependencies.cmake b/CMake/Dependencies.cmake
index dd7441972..8e1d88481 100644
--- a/CMake/Dependencies.cmake
+++ b/CMake/Dependencies.cmake
@@ -80,9 +80,6 @@ if (UNIX AND NOT EMSCRIPTEN)
   set(OGRE_DEP_SEARCH_PATH ${OGRE_DEP_SEARCH_PATH} /usr/lib/${CMAKE_SYSTEM_PROCESSOR}-linux-gnu)
 endif ()
 
-# give guesses as hints to the find_package calls
-set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} ${OGRE_DEP_SEARCH_PATH})
-set(CMAKE_FRAMEWORK_PATH ${CMAKE_FRAMEWORK_PATH} ${OGRE_DEP_SEARCH_PATH})
 
 if(OGRE_BUILD_DEPENDENCIES AND NOT EXISTS ${OGREDEPS_PATH})
     message(STATUS "Building pugixml")
@@ -214,8 +211,10 @@ find_package(FreeImage)
 macro_log_feature(FreeImage_FOUND "freeimage" "Support for commonly used graphics image formats" "http://freeimage.sourceforge.net")
 
 # Find FreeType
-find_package(Freetype)
-macro_log_feature(FREETYPE_FOUND "freetype" "Portable font engine" "http://www.freetype.org")
+if(OGRE_WITH_FREETYPE)
+  find_package(Freetype REQUIRED)
+endif()
+macro_log_feature(Freetype_FOUND "freetype" "Portable font engine" "http://www.freetype.org")
 
 # Find X11
 if (UNIX AND NOT APPLE AND NOT ANDROID AND NOT EMSCRIPTEN)
@@ -273,12 +272,17 @@ endif()
 
 # Find Cg
 if (NOT (APPLE_IOS OR WINDOWS_STORE OR WINDOWS_PHONE OR ANDROID OR EMSCRIPTEN))
-  find_package(Cg)
+  find_package(Cg QUIET)
   macro_log_feature(Cg_FOUND "cg" "C for graphics shader language" "http://developer.nvidia.com/object/cg_toolkit.html")
 endif ()
 
+find_package(SPIRV-Tools QUIET CONFIG)
+find_package(glslang QUIET)
+find_package(Vulkan QUIET)
+find_package(VulkanHeaders QUIET)
+
 # Find Vulkan SDK
-macro_log_feature(ENV{VULKAN_SDK} "Vulkan SDK" "Vulkan RenderSystem, glslang Plugin. Alternatively use system packages" "https://vulkan.lunarg.com/")
+macro_log_feature(Vulkan_FOUND "Vulkan SDK" "Vulkan RenderSystem, glslang Plugin. Alternatively use system packages" "https://vulkan.lunarg.com/")
 
 # OpenEXR
 find_package(OpenEXR)
@@ -291,7 +295,7 @@ find_package(PythonLibs)
 macro_log_feature(PYTHONLIBS_FOUND "Python" "Language bindings to use OGRE from Python" "http://www.python.org/")
 
 # SWIG
-find_package(SWIG 3.0.8 QUIET)
+find_package(SWIG QUIET)
 macro_log_feature(SWIG_FOUND "SWIG" "Language bindings (Python, Java, C#) for OGRE" "http://www.swig.org/")
 
 # pugixml
@@ -299,7 +303,7 @@ find_package(pugixml QUIET)
 macro_log_feature(pugixml_FOUND "pugixml" "Needed for XMLConverter and DotScene Plugin" "https://pugixml.org/")
 
 # Find zlib
-find_package(ZLIB)
+find_package(ZLIB QUIET)
 macro_log_feature(ZLIB_FOUND "zlib" "Simple data compression library" "http://www.zlib.net")
 
 # Assimp
@@ -310,17 +314,6 @@ macro_log_feature(assimp_FOUND "Assimp" "Needed for the AssimpLoader Plugin" "ht
 find_package(Bullet QUIET)
 macro_log_feature(BULLET_FOUND "Bullet" "Bullet physics" "https://pybullet.org")
 
-if(assimp_FOUND)
-  # workaround horribly broken assimp cmake, fixed with assimp 5.1
-  add_library(fix::assimp INTERFACE IMPORTED)
-  set_target_properties(fix::assimp PROPERTIES
-      INTERFACE_LINK_LIBRARIES "${ASSIMP_LIBRARIES};pugixml"
-      INTERFACE_LINK_DIRECTORIES "${ASSIMP_LIBRARY_DIRS}"
-  )
-  if(EXISTS "${ASSIMP_INCLUDE_DIRS}")
-    set_target_properties(fix::assimp PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${ASSIMP_INCLUDE_DIRS}")
-  endif()
-endif()
 
 #######################################################################
 # Samples dependencies
@@ -329,18 +322,26 @@ endif()
 # Find sdl2
 if(NOT ANDROID AND NOT EMSCRIPTEN)
   # find script does not work in cross compilation environment
-  find_package(SDL2 QUIET)
-  macro_log_feature(SDL2_FOUND "SDL2" "Simple DirectMedia Library needed for input handling in samples" "https://www.libsdl.org/")
-  if(SDL2_FOUND AND NOT TARGET SDL2::SDL2)
-    add_library(SDL2::SDL2 INTERFACE IMPORTED)
-    set_target_properties(SDL2::SDL2 PROPERTIES
+  if(OGRE_WITH_SDL)
+    find_package(SDL2)
+    macro_log_feature(SDL2_FOUND "SDL2" "Simple DirectMedia Library needed for input handling in samples" "https://www.libsdl.org/")
+    if(SDL2_FOUND AND NOT TARGET SDL2::SDL2)
+      add_library(SDL2::SDL2 INTERFACE IMPORTED)
+      set_target_properties(SDL2::SDL2 PROPERTIES
         INTERFACE_INCLUDE_DIRECTORIES "${SDL2_INCLUDE_DIRS}"
         INTERFACE_LINK_LIBRARIES "${SDL2_LIBRARIES}"
-    )
+      )
+    endif()
+  else()
+    set(SDL2_FOUND OFF)
   endif()
 
-  find_package(QT NAMES Qt6 Qt5 COMPONENTS Core Gui QUIET CONFIG)
-  find_package(Qt${QT_VERSION_MAJOR} COMPONENTS Core Gui QUIET CONFIG)
+  if(OGRE_WITH_QT)
+    find_package(Qt${QT_VERSION_MAJOR} COMPONENTS Core Gui QUIET CONFIG)
+    set(QT_FOUND ON)
+  else()
+    set(QT_FOUND OFF)
+  endif()
 
   macro_log_feature(QT_FOUND "Qt" "optional integration with the Qt Library for window creation and input" "http://www.qt.io/")
 endif()
@@ -353,5 +354,5 @@ find_package(Doxygen QUIET)
 macro_log_feature(DOXYGEN_FOUND "Doxygen" "Tool for building API documentation" "http://doxygen.org")
 
 # Find Softimage SDK
-find_package(Softimage)
+find_package(Softimage QUIET)
 macro_log_feature(Softimage_FOUND "Softimage" "Softimage SDK needed for building XSIExporter" "")
diff --git a/CMake/Utils/MacroLogFeature.cmake b/CMake/Utils/MacroLogFeature.cmake
index af0d3a125..d0473e915 100644
--- a/CMake/Utils/MacroLogFeature.cmake
+++ b/CMake/Utils/MacroLogFeature.cmake
@@ -110,7 +110,7 @@ MACRO(MACRO_DISPLAY_FEATURE_LOG)
       SET(_elist 1)
       FILE(READ ${_file} _enabled)
       FILE(REMOVE ${_file})
-      SET(_summary "${_summary}-----------------------------------------------------------------------------\n-- The following external packages were located on your system.\n-- This installation will have the extra features provided by these packages, unless disabled.\n${_enabled}")
+      SET(_summary "${_summary}-----------------------------------------------------------------------------\n-- The following external packages were located on your system.\n-- This installation will have the extra features provided by these packages, but only if you specified the corresponding conan option. \n${_enabled}")
    ENDIF (EXISTS ${_file})
 
    SET(_dlist 0)
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 858dd7caa..05d3cc9c4 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -64,6 +64,7 @@ if (APPLE AND NOT ANDROID AND NOT EMSCRIPTEN AND NOT ANDROID_PLATFORM)
 endif ()
 
 project(OGRE VERSION 14.3.4)
+add_compile_definitions(QT_NO_VERSION_TAGGING)
 
 # extra version info
 set(OGRE_VERSION_SUFFIX "")
@@ -193,11 +194,15 @@ if((CMAKE_CXX_COMPILER_ID MATCHES "Clang|GNU") AND NOT OGRE_STATIC)
 endif()
 
 # determine system endianness
-if (MSVC OR ANDROID OR EMSCRIPTEN OR APPLE_IOS)
+if (MSVC OR ANDROID OR EMSCRIPTEN OR APPLE_IOS OR QT_VERSION_MAJOR STREQUAL 6)
   # This doesn't work on VS 2010
   # MSVC only builds for intel anyway
   # all IOS devices are little endian
   set(OGRE_TEST_BIG_ENDIAN FALSE)
+  # Test will fail if Qt6 is a requirement, unknown why
+  if(QT_VERSION_MAJOR STREQUAL 6)
+      message(WARNING "OGRE_TEST_BIG_ENDIAN set to FALSE without testing")
+  endif()
 else()
   include(TestBigEndian)
   test_big_endian(OGRE_TEST_BIG_ENDIAN)
@@ -314,6 +319,10 @@ cmake_dependent_option(OGRE_BUILD_PLUGIN_CG "Build Cg plugin" TRUE "Cg_FOUND;NOT
 option(OGRE_BUILD_PLUGIN_GLSLANG "Build glslang plugin" ${OGRE_BUILD_RENDERSYSTEM_VULKAN}) # no way to determine whether glslang is present
 option(OGRE_BUILD_COMPONENT_OVERLAY "Build Overlay component" TRUE)
 
+option(OGRE_WITH_FREETYPE "Build with freetype" FALSE)
+option(OGRE_WITH_QT "Build with QT support" FALSE)
+option(OGRE_WITH_SDL "Build with SDL2 support" FALSE)
+
 cmake_dependent_option(OGRE_BUILD_COMPONENT_OVERLAY_IMGUI "Include dear imgui in Overlays" TRUE "OGRE_BUILD_COMPONENT_OVERLAY" FALSE)
 
 cmake_dependent_option(OGRE_BUILD_COMPONENT_BITES "Build OgreBites component" TRUE "OGRE_BUILD_COMPONENT_OVERLAY" FALSE)
@@ -332,7 +341,7 @@ cmake_dependent_option(OGRE_BUILD_LIBS_AS_FRAMEWORKS "Build frameworks for libra
 cmake_dependent_option(OGRE_BUILD_TESTS "Build the unit tests & PlayPen" FALSE "OGRE_BUILD_COMPONENT_BITES" FALSE)
 option(OGRE_CONFIG_DOUBLE "Use doubles instead of floats in Ogre" FALSE)
 option(OGRE_CONFIG_NODE_INHERIT_TRANSFORM "Tells the node whether it should inherit full transform from it's parent node or derived position, orientation and scale" FALSE)
-set(OGRE_CONFIG_THREADS "3" CACHE STRING 
+set(OGRE_CONFIG_THREADS "3" CACHE STRING
 	"Enable Ogre thread safety support for multithreading. Possible values:
 	0 - no thread safety. DefaultWorkQueue is not threaded.
 	1 - background resource preparation and loading is thread safe. Threaded DefaultWorkQueue. [DEPRECATED]
diff --git a/Components/Bullet/CMakeLists.txt b/Components/Bullet/CMakeLists.txt
index 670f85a2c..280a5f54a 100644
--- a/Components/Bullet/CMakeLists.txt
+++ b/Components/Bullet/CMakeLists.txt
@@ -7,7 +7,6 @@ target_link_libraries(OgreBullet PUBLIC OgreMain)
 target_include_directories(OgreBullet PUBLIC
   "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>"
   $<INSTALL_INTERFACE:include/OGRE/Bullet>)
-target_include_directories(OgreBullet SYSTEM PUBLIC "$<BUILD_INTERFACE:${BULLET_INCLUDE_DIRS}>")
 
 if(OGRE_BUILD_DEPENDENCIES)
   target_include_directories(OgreBullet PUBLIC "$<INSTALL_INTERFACE:include/bullet>")
diff --git a/Components/Overlay/CMakeLists.txt b/Components/Overlay/CMakeLists.txt
index 41bd63464..15d5faf74 100644
--- a/Components/Overlay/CMakeLists.txt
+++ b/Components/Overlay/CMakeLists.txt
@@ -19,7 +19,7 @@ list(APPEND HEADER_FILES
 file(GLOB SOURCE_FILES "${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp")
 
 if(OGRE_BUILD_COMPONENT_OVERLAY_IMGUI)
-  set(IMGUI_DIR "${PROJECT_BINARY_DIR}/imgui-1.91.2" CACHE PATH "")
+  set(IMGUI_DIR "${PROJECT_BINARY_DIR}/imgui" CACHE PATH "")
   if(NOT EXISTS ${IMGUI_DIR})
     message(STATUS "Downloading imgui")
     file(DOWNLOAD
@@ -34,7 +34,7 @@ if(OGRE_BUILD_COMPONENT_OVERLAY_IMGUI)
     ${IMGUI_DIR}/imgui_tables.cpp
     ${IMGUI_DIR}/imgui_widgets.cpp
     ${IMGUI_DIR}/imgui_demo.cpp)
-  if(FREETYPE_FOUND)
+  if(OGRE_WITH_FREETYPE)
     set(IMGUI_ENABLE_FREETYPE TRUE)
     list(APPEND SOURCE_FILES ${IMGUI_DIR}/misc/freetype/imgui_freetype.cpp)
   endif()
@@ -50,7 +50,7 @@ target_include_directories(OgreOverlay PUBLIC
   "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>"
   $<INSTALL_INTERFACE:include/OGRE/Overlay>)
 
-if(FREETYPE_FOUND)
+if(OGRE_WITH_FREETYPE)
   target_compile_definitions(OgreOverlay PRIVATE HAVE_FREETYPE)
   target_link_libraries(OgreOverlay PRIVATE ${FREETYPE_LIBRARIES})
   target_include_directories(OgreOverlay PRIVATE ${FREETYPE_INCLUDE_DIRS})
@@ -61,6 +61,10 @@ elseif(UNIX)
   set_source_files_properties(src/OgreFont.cpp PROPERTIES
     COMPILE_FLAGS "-Wno-cast-qual -Wno-unused-function")
 endif()
+if(OGRE_WITH_QT)
+  # workaround a linking issue with BitesQT
+  target_link_libraries(OgreOverlay PUBLIC PNG::PNG BZip2::BZip2)
+endif()
 
 if(OGRE_BUILD_COMPONENT_OVERLAY_IMGUI)
   target_include_directories(OgreOverlay PUBLIC
@@ -78,7 +82,7 @@ if(OGRE_BUILD_COMPONENT_OVERLAY_IMGUI)
     set_source_files_properties(${IMGUI_DIR}/imgui.cpp PROPERTIES
       COMPILE_FLAGS "-Wno-cast-qual -Wno-unused-variable")
     set_source_files_properties(${IMGUI_DIR}/imgui_demo.cpp PROPERTIES
-      COMPILE_FLAGS "-Wno-cast-qual")
+      COMPILE_FLAGS "-Wno-cast-qual -Wno-format-truncation")
     if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
       set_property(SOURCE ${IMGUI_DIR}/misc/freetype/imgui_freetype.cpp
         APPEND PROPERTY COMPILE_OPTIONS "-Wno-unknown-warning-option")
diff --git a/PlugIns/Assimp/CMakeLists.txt b/PlugIns/Assimp/CMakeLists.txt
index 3dc686ae3..3325902f3 100644
--- a/PlugIns/Assimp/CMakeLists.txt
+++ b/PlugIns/Assimp/CMakeLists.txt
@@ -5,7 +5,7 @@ add_library(Codec_Assimp ${OGRE_LIB_TYPE} ${HEADER_FILES} src/AssimpLoader.cpp)
 target_include_directories(Codec_Assimp PUBLIC
     "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>"
     $<INSTALL_INTERFACE:include/OGRE/Plugins/Assimp>)
-target_link_libraries(Codec_Assimp PUBLIC OgreMain fix::assimp)
+target_link_libraries(Codec_Assimp PUBLIC OgreMain assimp::assimp)
 
 if(OGRE_BUILD_COMPONENT_RTSHADERSYSTEM)
     target_link_libraries(Codec_Assimp PUBLIC OgreRTShaderSystem)
diff --git a/PlugIns/FreeImageCodec/CMakeLists.txt b/PlugIns/FreeImageCodec/CMakeLists.txt
index 1721957cd..8508db942 100644
--- a/PlugIns/FreeImageCodec/CMakeLists.txt
+++ b/PlugIns/FreeImageCodec/CMakeLists.txt
@@ -14,10 +14,10 @@ set(SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/src/OgreFreeImageCodec.cpp")
 add_definitions(-DFREEIMAGE_LIB)
 add_library(Codec_FreeImage ${OGRE_LIB_TYPE} ${HEADER_FILES} ${SOURCES})
 target_link_libraries(Codec_FreeImage PUBLIC OgreMain ${FreeImage_LIBRARIES})
-target_include_directories(Codec_FreeImage PUBLIC 
+target_include_directories(Codec_FreeImage PUBLIC
     "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>"
-    $<INSTALL_INTERFACE:include/OGRE/Plugins/FreeImageCodec>
-    PRIVATE "${FreeImage_INCLUDE_DIR}")
+    PRIVATE
+    $<INSTALL_INTERFACE:include/OGRE/Plugins/FreeImageCodec>)
 
 if (MINGW)
   # may need winsock htons functions for FreeImage
diff --git a/PlugIns/GLSLang/CMakeLists.txt b/PlugIns/GLSLang/CMakeLists.txt
index 17844605c..2d841c807 100644
--- a/PlugIns/GLSLang/CMakeLists.txt
+++ b/PlugIns/GLSLang/CMakeLists.txt
@@ -13,30 +13,17 @@ if(ANDROID)
         ${ANDROID_NDK}/sources/third_party/shaderc/third_party/)
     target_link_libraries(Plugin_GLSLangProgramManager PUBLIC OgreMain
         ${ANDROID_NDK}/sources/third_party/shaderc/libs/c++_static/${ANDROID_ABI}/libshaderc.a)
-elseif(DEFINED ENV{VULKAN_SDK})
-    message(STATUS "Using VULKAN_SDK: $ENV{VULKAN_SDK}")
-    target_include_directories(Plugin_GLSLangProgramManager SYSTEM PRIVATE $ENV{VULKAN_SDK}/include)
-    target_link_directories(Plugin_GLSLangProgramManager PUBLIC $ENV{VULKAN_SDK}/lib)
-    target_link_libraries(Plugin_GLSLangProgramManager PUBLIC OgreMain shaderc_combined)
-else()
-  set(GLSLANG_LIBS glslang SPIRV SPIRV-Tools-opt SPIRV-Tools)
-  find_library(GLSLANG_OSDependent OSDependent)
-  if(GLSLANG_OSDependent)
-    set(GLSLANG_LIBS ${GLSLANG_LIBS} ${GLSLANG_OSDependent})
-  endif()
-  find_library(GLSLANG_HLSL HLSL)
-  if(GLSLANG_HLSL)
-    set(GLSLANG_LIBS ${GLSLANG_LIBS} ${GLSLANG_HLSL})
-  endif()
-  find_library(GLSLANG_OGLCompiler OGLCompiler)
-  if(GLSLANG_OGLCompiler)
-    set(GLSLANG_LIBS ${GLSLANG_LIBS} ${GLSLANG_OGLCompiler})
+elseif(WIN32)
+  if(TARGET Vulkan::Vulkan)
+    target_link_libraries(Plugin_GLSLangProgramManager PRIVATE Vulkan::Vulkan Vulkan::Headers Vulkan::Registry)
   endif()
-  find_library(GLSLANG_MI MachineIndependent)
-  if(GLSLANG_MI)
-      set(GLSLANG_LIBS ${GLSLANG_MI} GenericCodeGen ${GLSLANG_LIBS})
-  endif()
-  target_link_libraries(Plugin_GLSLangProgramManager PUBLIC OgreMain ${GLSLANG_LIBS})
+  target_link_libraries(Plugin_GLSLangProgramManager PUBLIC
+    OgreMain
+    glslang::glslang glslang::HLSL glslang::OSDependent glslang::OGLCompiler glslang::SPIRV SPIRV-Tools-static SPIRV-Tools-opt)
+else()
+  target_link_libraries(Plugin_GLSLangProgramManager PUBLIC
+    OgreMain
+    glslang::glslang glslang::HLSL glslang::OSDependent glslang::OGLCompiler glslang::SPIRV SPIRV-Tools-static SPIRV-Tools-opt)
 endif()
 ogre_config_framework(Plugin_GLSLangProgramManager)
 ogre_config_plugin(Plugin_GLSLangProgramManager)
diff --git a/RenderSystems/Vulkan/CMakeLists.txt b/RenderSystems/Vulkan/CMakeLists.txt
index ae9340b72..073f862ac 100755
--- a/RenderSystems/Vulkan/CMakeLists.txt
+++ b/RenderSystems/Vulkan/CMakeLists.txt
@@ -18,10 +18,7 @@ set( SOURCE_FILES ${SOURCE_FILES})
 
 add_library(RenderSystem_Vulkan ${OGRE_LIB_TYPE} ${HEADER_FILES} ${SOURCE_FILES})
 
-if(DEFINED ENV{VULKAN_SDK})
-    target_include_directories(RenderSystem_Vulkan SYSTEM PRIVATE $ENV{VULKAN_SDK}/include)
-    target_link_directories(RenderSystem_Vulkan PUBLIC $ENV{VULKAN_SDK}/lib)
-endif()
+target_link_directories(RenderSystem_Vulkan PRIVATE Vulkan::Vulkan Vulkan::Headers Vulkan::Registry)
 
 if(WIN32)
     target_compile_definitions(RenderSystem_Vulkan PRIVATE VK_USE_PLATFORM_WIN32_KHR)
diff --git a/Tests/CMakeLists.txt b/Tests/CMakeLists.txt
index 9b72bd8b9..3498b56b0 100644
--- a/Tests/CMakeLists.txt
+++ b/Tests/CMakeLists.txt
@@ -10,7 +10,7 @@
 # Configure Tests build
 if (OGRE_BUILD_TESTS)
 
-  if(NOT EXISTS ${PROJECT_BINARY_DIR}/googletest-1.11.0)
+  if(FALSE)
     message(STATUS "Building gtest")
     file(DOWNLOAD
         https://github.com/google/googletest/archive/refs/tags/release-1.11.0.tar.gz
diff --git a/Tools/AssimpConverter/CMakeLists.txt b/Tools/AssimpConverter/CMakeLists.txt
index f188f93ff..7ec56f32c 100644
--- a/Tools/AssimpConverter/CMakeLists.txt
+++ b/Tools/AssimpConverter/CMakeLists.txt
@@ -9,11 +9,8 @@
 
 add_executable(OgreAssimpConverter main.cpp)
 target_link_libraries(OgreAssimpConverter OgreMain OgreRTShaderSystem)
-target_include_directories(OgreAssimpConverter PRIVATE $<TARGET_PROPERTY:fix::assimp,INTERFACE_INCLUDE_DIRECTORIES>)
+target_include_directories(OgreAssimpConverter PRIVATE $<TARGET_PROPERTY:assimp::assimp,INTERFACE_INCLUDE_DIRECTORIES>)
 if (OGRE_PROJECT_FOLDERS)
 	set_property(TARGET OgreAssimpConverter PROPERTY FOLDER Tools)
 endif ()
 ogre_config_tool(OgreAssimpConverter)
-
-set_property(TARGET OgreAssimpConverter PROPERTY
-	INSTALL_RPATH "$ORIGIN/../${OGRE_PLUGINS_PATH}")
\ No newline at end of file
-- 
2.39.5

