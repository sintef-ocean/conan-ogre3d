From 872f8a9eed5c9d22b839df53ac2c8e111f6d4a9c Mon Sep 17 00:00:00 2001
From: Joakim Haugen <joakim.haugen@gmail.com>
Date: Wed, 11 May 2022 16:00:50 +0200
Subject: [PATCH 1/6] Do essential conanization fixes

---
 CMake/Dependencies.cmake            | 63 +++++++++++++++++------------
 CMakeLists.txt                      |  6 ++-
 Components/Csharp/CMakeLists.txt    |  2 +-
 Components/Java/CMakeLists.txt      |  2 +-
 Components/Overlay/CMakeLists.txt   |  6 ++-
 Components/Python/CMakeLists.txt    |  2 +-
 PlugIns/Assimp/CMakeLists.txt       |  2 +-
 PlugIns/DotScene/CMakeLists.txt     |  2 +-
 PlugIns/GLSLang/CMakeLists.txt      | 13 ++++--
 RenderSystems/Tiny/CMakeLists.txt   | 11 ++++-
 RenderSystems/Vulkan/CMakeLists.txt |  4 +-
 Tools/XMLConverter/CMakeLists.txt   |  2 +-
 12 files changed, 72 insertions(+), 43 deletions(-)

diff --git a/CMake/Dependencies.cmake b/CMake/Dependencies.cmake
index b80742a13..eea356ddd 100644
--- a/CMake/Dependencies.cmake
+++ b/CMake/Dependencies.cmake
@@ -65,8 +65,10 @@ if (UNIX AND NOT EMSCRIPTEN)
 endif ()
 
 # give guesses as hints to the find_package calls
-set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} ${OGRE_DEP_SEARCH_PATH})
-set(CMAKE_FRAMEWORK_PATH ${CMAKE_FRAMEWORK_PATH} ${OGRE_DEP_SEARCH_PATH})
+set(OGRE_DEP_SEARCH_PATH ${CMAKE_BINARY_DIR})
+list(PREPEND CMAKE_MODULE_PATH ${CMAKE_BINARY_DIR})
+list(APPEND CMAKE_PREFIX_PATH ${OGRE_DEP_SEARCH_PATH})
+list(APPEND CMAKE_FRAMEWORK_PATH ${OGRE_DEP_SEARCH_PATH})
 
 if(OGRE_BUILD_DEPENDENCIES AND NOT EXISTS ${OGREDEPS_PATH})
     message(STATUS "Building pugixml")
@@ -165,11 +167,18 @@ endif()
 #######################################################################
 
 # Find FreeImage
-find_package(FreeImage)
+find_package(FreeImage MODULE QUIET)
 macro_log_feature(FreeImage_FOUND "freeimage" "Support for commonly used graphics image formats" "http://freeimage.sourceforge.net")
 
 # Find FreeType
-find_package(Freetype)
+if(OGRE_WITH_FREETYPE)
+  find_package(Freetype MODULE QUIET)
+  set(FREETYPE_FOUND ${Freetype_FOUND})
+  set(FREETYPE_INCLUDE_DIRS ${Freetype_INCLUDE_DIRS})
+  set(FREETYPE_LIBRARIES ${Freetype_LIBRARIES})
+else()
+  set(FREETYPE_FOUND OFF)
+endif()
 macro_log_feature(FREETYPE_FOUND "freetype" "Portable font engine" "http://www.freetype.org")
 
 # Find X11
@@ -217,15 +226,23 @@ endif()
 
 # Find Cg
 if (NOT (APPLE_IOS OR WINDOWS_STORE OR WINDOWS_PHONE OR ANDROID OR EMSCRIPTEN))
-  find_package(Cg)
+  find_package(Cg QUIET)
   macro_log_feature(Cg_FOUND "cg" "C for graphics shader language" "http://developer.nvidia.com/object/cg_toolkit.html")
 endif ()
 
+find_package(glslang MODULE QUIET)
+find_package(spirv-tools MODULE QUIET)
+find_package(Vulkan MODULE QUIET)
+find_package(VulkanHeaders MODULE QUIET)
+
 # Find Vulkan SDK
 macro_log_feature(ENV{VULKAN_SDK} "Vulkan SDK" "Vulkan RenderSystem, glslang Plugin. Alternatively use system packages" "https://vulkan.lunarg.com/")
 
 # OpenEXR
-find_package(OpenEXR)
+find_package(OpenEXR MODULE QUIET)
+set(OPENEXR_FOUND ${OpenEXR_FOUND})
+set(OPENEXR_INCLUDE_DIR ${OpenEXR_INCLUDE_DIR})
+set(OPENEXR_LIBRARIES ${OpenEXR_LIBRARIES})
 macro_log_feature(OPENEXR_FOUND "OpenEXR" "Load High dynamic range images" "http://www.openexr.com/")
 
 # Python
@@ -235,32 +252,21 @@ find_package(PythonLibs)
 macro_log_feature(PYTHONLIBS_FOUND "Python" "Language bindings to use OGRE from Python" "http://www.python.org/")
 
 # SWIG
-find_package(SWIG 3.0.8 QUIET)
+find_package(SWIG QUIET)
 macro_log_feature(SWIG_FOUND "SWIG" "Language bindings (Python, Java, C#) for OGRE" "http://www.swig.org/")
 
 # pugixml
-find_package(pugixml QUIET)
+find_package(pugixml MODULE QUIET)
 macro_log_feature(pugixml_FOUND "pugixml" "Needed for XMLConverter and DotScene Plugin" "https://pugixml.org/")
 
 # Find zlib
-find_package(ZLIB)
+find_package(ZLIB MODULE QUIET)
 macro_log_feature(ZLIB_FOUND "zlib" "Simple data compression library" "http://www.zlib.net")
 
 # Assimp
-find_package(assimp QUIET)
+find_package(assimp MODULE QUIET)
 macro_log_feature(assimp_FOUND "Assimp" "Needed for the AssimpLoader Plugin" "https://www.assimp.org/")
 
-if(assimp_FOUND)
-  # workaround horribly broken assimp cmake, fixed with assimp 5.1
-  add_library(fix::assimp INTERFACE IMPORTED)
-  set_target_properties(fix::assimp PROPERTIES
-      INTERFACE_LINK_LIBRARIES "${ASSIMP_LIBRARIES};pugixml"
-      INTERFACE_LINK_DIRECTORIES "${ASSIMP_LIBRARY_DIRS}"
-  )
-  if(EXISTS "${ASSIMP_INCLUDE_DIRS}")
-    set_target_properties(fix::assimp PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${ASSIMP_INCLUDE_DIRS}")
-  endif()
-endif()
 
 #######################################################################
 # Samples dependencies
@@ -269,7 +275,7 @@ endif()
 # Find sdl2
 if(NOT ANDROID AND NOT EMSCRIPTEN)
   # find script does not work in cross compilation environment
-  find_package(SDL2 QUIET)
+  find_package(SDL2 MODULE QUIET)
   macro_log_feature(SDL2_FOUND "SDL2" "Simple DirectMedia Library needed for input handling in samples" "https://www.libsdl.org/")
   if(SDL2_FOUND AND NOT TARGET SDL2::SDL2)
     add_library(SDL2::SDL2 INTERFACE IMPORTED)
@@ -279,9 +285,14 @@ if(NOT ANDROID AND NOT EMSCRIPTEN)
     )
   endif()
 
-  find_package(QT NAMES Qt6 Qt5 COMPONENTS Core Gui QUIET CONFIG)
-  find_package(Qt${QT_VERSION_MAJOR} COMPONENTS Core Gui QUIET CONFIG)
-
+  if(OGRE_WITH_QT)
+    set(QT_VERSION_MAJOR 5)
+    find_package(QT NAMES Qt6 Qt5 COMPONENTS Core Gui QUIET)
+    find_package(Qt${QT_VERSION_MAJOR} COMPONENTS Core Gui QUIET)
+    set(QT_FOUND ON)
+  else()
+    set(QT_FOUND OFF)
+  endif()
   macro_log_feature(QT_FOUND "Qt" "optional integration with the Qt Library for window creation and input" "http://www.qt.io/")
 endif()
 
@@ -293,5 +304,5 @@ find_package(Doxygen QUIET)
 macro_log_feature(DOXYGEN_FOUND "Doxygen" "Tool for building API documentation" "http://doxygen.org")
 
 # Find Softimage SDK
-find_package(Softimage)
+find_package(Softimage QUIET)
 macro_log_feature(Softimage_FOUND "Softimage" "Softimage SDK needed for building XSIExporter" "")
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 761a9d232..b69e92980 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -68,6 +68,9 @@ if (APPLE AND NOT ANDROID)
 endif ()
 
 project(OGRE VERSION 13.3.4)
+include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
+conan_basic_setup()
+add_compile_definitions(QT_NO_VERSION_TAGGING)
 
 # extra version info
 set(OGRE_VERSION_SUFFIX "")
@@ -337,7 +340,8 @@ cmake_dependent_option(OGRE_BUILD_COMPONENT_PROPERTY "Build Property component"
 cmake_dependent_option(OGRE_BUILD_PLUGIN_CG "Build Cg plugin" TRUE "Cg_FOUND;NOT APPLE_IOS;NOT WINDOWS_STORE;NOT WINDOWS_PHONE" FALSE)
 option(OGRE_BUILD_PLUGIN_GLSLANG "Build glslang plugin" ${OGRE_BUILD_RENDERSYSTEM_VULKAN}) # no way to determine whether glslang is present
 option(OGRE_BUILD_COMPONENT_OVERLAY "Build Overlay component" TRUE)
-
+option(OGRE_WITH_FREETYPE "Build with freetype" FALSE)
+option(OGRE_WITH_QT "Build with QT support" FALSE)
 cmake_dependent_option(OGRE_BUILD_COMPONENT_OVERLAY_IMGUI "Include dear imgui in Overlays" TRUE "OGRE_BUILD_COMPONENT_OVERLAY" FALSE)
 
 cmake_dependent_option(OGRE_BUILD_COMPONENT_BITES "Build OgreBites component" TRUE "OGRE_BUILD_COMPONENT_OVERLAY" FALSE)
diff --git a/Components/Csharp/CMakeLists.txt b/Components/Csharp/CMakeLists.txt
index da6cd17ee..71cf9870b 100644
--- a/Components/Csharp/CMakeLists.txt
+++ b/Components/Csharp/CMakeLists.txt
@@ -16,7 +16,7 @@ if(NOT CMAKE_CSharp_COMPILER)
 endif()
 
 include_directories("${PROJECT_BINARY_DIR}/include" "${PROJECT_SOURCE_DIR}/OgreMain/include")
-include(${SWIG_USE_FILE})
+include(UseSWIG)
 
 if(MSVC)
 	add_definitions(/bigobj /wd4700)
diff --git a/Components/Java/CMakeLists.txt b/Components/Java/CMakeLists.txt
index c694685ef..5e4e7a879 100644
--- a/Components/Java/CMakeLists.txt
+++ b/Components/Java/CMakeLists.txt
@@ -16,7 +16,7 @@ endif()
 
 include_directories(${JNI_INCLUDE_DIRS})
 include_directories("${PROJECT_BINARY_DIR}/include" "${PROJECT_SOURCE_DIR}/OgreMain/include")
-include(${SWIG_USE_FILE})
+include(UseSWIG)
 
 if(MSVC)
 	add_definitions(/bigobj /wd4700)
diff --git a/Components/Overlay/CMakeLists.txt b/Components/Overlay/CMakeLists.txt
index ec67ef51a..dbdb9f371 100644
--- a/Components/Overlay/CMakeLists.txt
+++ b/Components/Overlay/CMakeLists.txt
@@ -46,7 +46,11 @@ endif()
 add_library(OgreOverlay ${OGRE_COMP_LIB_TYPE} ${HEADER_FILES} ${SOURCE_FILES})
 set_target_properties(OgreOverlay PROPERTIES VERSION ${OGRE_SOVERSION} SOVERSION ${OGRE_SOVERSION})
 target_link_libraries(OgreOverlay PUBLIC OgreMain)
-target_include_directories(OgreOverlay PUBLIC 
+if(OGRE_WITH_QT)
+  # workaround a linking issue with BitesQt
+  target_link_libraries(OgreOverlay PUBLIC PNG::PNG BZip2::BZip2)
+endif()
+target_include_directories(OgreOverlay PUBLIC
   "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>"
   $<INSTALL_INTERFACE:include/OGRE/Overlay>)
 
diff --git a/Components/Python/CMakeLists.txt b/Components/Python/CMakeLists.txt
index 825ba1711..effaf8f16 100644
--- a/Components/Python/CMakeLists.txt
+++ b/Components/Python/CMakeLists.txt
@@ -6,7 +6,7 @@ endif()
 
 include_directories(${PYTHON_INCLUDE_PATH})
 include_directories("${PROJECT_BINARY_DIR}/include" "${PROJECT_SOURCE_DIR}/OgreMain/include")
-include(${SWIG_USE_FILE})
+include(UseSWIG)
 
 set(PYTHON_SITE_PACKAGES lib/python${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}/dist-packages/Ogre/)
 
diff --git a/PlugIns/Assimp/CMakeLists.txt b/PlugIns/Assimp/CMakeLists.txt
index 3dc686ae3..3325902f3 100644
--- a/PlugIns/Assimp/CMakeLists.txt
+++ b/PlugIns/Assimp/CMakeLists.txt
@@ -5,7 +5,7 @@ add_library(Codec_Assimp ${OGRE_LIB_TYPE} ${HEADER_FILES} src/AssimpLoader.cpp)
 target_include_directories(Codec_Assimp PUBLIC
     "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>"
     $<INSTALL_INTERFACE:include/OGRE/Plugins/Assimp>)
-target_link_libraries(Codec_Assimp PUBLIC OgreMain fix::assimp)
+target_link_libraries(Codec_Assimp PUBLIC OgreMain assimp::assimp)
 
 if(OGRE_BUILD_COMPONENT_RTSHADERSYSTEM)
     target_link_libraries(Codec_Assimp PUBLIC OgreRTShaderSystem)
diff --git a/PlugIns/DotScene/CMakeLists.txt b/PlugIns/DotScene/CMakeLists.txt
index ffc2622c4..ad0cbf8b5 100644
--- a/PlugIns/DotScene/CMakeLists.txt
+++ b/PlugIns/DotScene/CMakeLists.txt
@@ -5,7 +5,7 @@ add_library(Plugin_DotScene ${OGRE_LIB_TYPE} ${HEADER_FILES} src/DotSceneLoader.
 target_include_directories(Plugin_DotScene PUBLIC
     "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>"
     $<INSTALL_INTERFACE:include/OGRE/Plugins/DotScene>)
-target_link_libraries(Plugin_DotScene PUBLIC OgreMain PRIVATE pugixml)
+target_link_libraries(Plugin_DotScene PUBLIC OgreMain PRIVATE pugixml::pugixml)
 if(OGRE_BUILD_COMPONENT_TERRAIN)
     target_link_libraries(Plugin_DotScene PUBLIC OgreTerrain)
 endif()
diff --git a/PlugIns/GLSLang/CMakeLists.txt b/PlugIns/GLSLang/CMakeLists.txt
index 91f675f72..d8b790a4e 100644
--- a/PlugIns/GLSLang/CMakeLists.txt
+++ b/PlugIns/GLSLang/CMakeLists.txt
@@ -13,11 +13,16 @@ if(ANDROID)
     target_link_libraries(Plugin_GLSLangProgramManager PUBLIC OgreMain
         ${ANDROID_NDK}/sources/third_party/shaderc/libs/c++_static/${ANDROID_ABI}/libshaderc.a)
 elseif(WIN32)
-    target_include_directories(Plugin_GLSLangProgramManager PRIVATE $ENV{VULKAN_SDK}/include)
-    target_link_directories(Plugin_GLSLangProgramManager PRIVATE $ENV{VULKAN_SDK}/lib)
-    target_link_libraries(Plugin_GLSLangProgramManager PUBLIC OgreMain shaderc_combined)
+    if(TARGET Vulkan::Vulkan)
+      target_link_libraries(Plugin_GLSLangProgramManager PRIVATE Vulkan::Vulkan Vulkan::Headers Vulkan::Registry)
+    endif()
+    target_link_libraries(Plugin_GLSLangProgramManager PUBLIC
+      OgreMain
+      glslang::glslang glslang::HLSL glslang::OSDependent glslang::OGLCompiler glslang::SPIRV spirv-tools::SPIRV-Tools spirv-tools::SPIRV-Tools-opt)
 else()
-    target_link_libraries(Plugin_GLSLangProgramManager PUBLIC OgreMain glslang HLSL OSDependent OGLCompiler SPIRV SPIRV-Tools SPIRV-Tools-opt)
+    target_link_libraries(Plugin_GLSLangProgramManager PUBLIC
+      OgreMain
+      glslang::glslang glslang::HLSL glslang::OSDependent glslang::OGLCompiler glslang::SPIRV spirv-tools::SPIRV-Tools spirv-tools::SPIRV-Tools-opt)
 endif()
 
 ogre_config_framework(Plugin_GLSLangProgramManager)
diff --git a/RenderSystems/Tiny/CMakeLists.txt b/RenderSystems/Tiny/CMakeLists.txt
index b91d50a95..5331fc05e 100644
--- a/RenderSystems/Tiny/CMakeLists.txt
+++ b/RenderSystems/Tiny/CMakeLists.txt
@@ -19,9 +19,16 @@ target_include_directories(RenderSystem_Tiny PUBLIC
     "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>"
     $<INSTALL_INTERFACE:include/OGRE/RenderSystems/Tiny>)
 
-find_package(OpenMP QUIET)
+if(MSVC)
+  find_package(OpenMP QUIET)
+else()
+  find_package(llvm-openmp MODULE)
+  set(OpenMP_CXX_FOUND 1)
+  add_library(OpenMP::OpenMP_CXX INTERFACE IMPORTED)
+  target_link_libraries(OpenMP::OpenMP_CXX INTERFACE llvm-openmp::llvm-openmp)
+endif()
 if(OpenMP_CXX_FOUND)
-    target_link_libraries(RenderSystem_Tiny PUBLIC OpenMP::OpenMP_CXX)
+    target_link_libraries(RenderSystem_Tiny PRIVATE OpenMP::OpenMP_CXX)
 endif()
 
 if(SDL2_FOUND)
diff --git a/RenderSystems/Vulkan/CMakeLists.txt b/RenderSystems/Vulkan/CMakeLists.txt
index 8d8b92d3a..ea077caf0 100755
--- a/RenderSystems/Vulkan/CMakeLists.txt
+++ b/RenderSystems/Vulkan/CMakeLists.txt
@@ -18,9 +18,7 @@ set( SOURCE_FILES ${SOURCE_FILES})
 add_library(RenderSystem_Vulkan ${OGRE_LIB_TYPE} ${HEADER_FILES} ${SOURCE_FILES})
 
 if(WIN32)
-    target_include_directories(RenderSystem_Vulkan PRIVATE $ENV{VULKAN_SDK}/Include)
-    target_link_directories(RenderSystem_Vulkan PRIVATE $ENV{VULKAN_SDK}/Lib)
-
+    target_link_libraries(RenderSystem_Vulkan PRIVATE Vulkan::Vulkan Vulkan::Headers Vulkan::Registry)
     set_source_files_properties("${CMAKE_CURRENT_SOURCE_DIR}/src/volk.c"
         PROPERTIES COMPILE_DEFINITIONS VK_USE_PLATFORM_WIN32_KHR)
 elseif(ANDROID)
diff --git a/Tools/XMLConverter/CMakeLists.txt b/Tools/XMLConverter/CMakeLists.txt
index fa5411f14..b4a39d28c 100644
--- a/Tools/XMLConverter/CMakeLists.txt
+++ b/Tools/XMLConverter/CMakeLists.txt
@@ -23,7 +23,7 @@ set(SOURCE_FILES
 
 add_executable(OgreXMLConverter ${HEADER_FILES} ${SOURCE_FILES})
 target_include_directories(OgreXMLConverter PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include)
-target_link_libraries(OgreXMLConverter OgreMain pugixml)
+target_link_libraries(OgreXMLConverter OgreMain pugixml::pugixml)
 
 if (OGRE_PROJECT_FOLDERS)
 	set_property(TARGET OgreXMLConverter PROPERTY FOLDER Tools)
-- 
2.25.1

